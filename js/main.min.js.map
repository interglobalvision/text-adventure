{"version":3,"sources":["main.js"],"names":["Adventure","story","container","$","form","input","$customForm","$focus","$mainContainer","currentPlace","save","init","place","_this","this","window","on","submit","event","preventDefault","listen","val","go","clean","html","removeClass","addClass","say","toUpperCase","_","has","type","chat","question","description","focus","text","toLowerCase","words","split","actions","keys","i","length","action","help","x","indexOf","replace","append","scrollTo","document","body","scrollHeight","conversation","options","chatForm","ffs","size","checked","find","bind","selectedOption","nextPlace","answerName","questionForm","answer","placeExist","ready","Story","load"],"mappings":"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","file":"main.min.js","sourcesContent":["/* jshint browser: true, devel: true, indent: 2, curly: true, eqeqeq: true, futurehostile: true, latedef: true, undef: true, unused: true */\n/* global $, document, Adventure, _, Story */\n\nAdventure = {\n  story: '',\n  container: $('#description'),\n  form: $('#input-form'),\n  input: $('#text-input'),\n  $customForm: $('#custom-form-container'),\n  $focus: null,\n  $mainContainer: $('#main-container'),\n  currentPlace: null,\n  save: {},\n  init: function(story, place) {\n    var _this = this;\n\n    // Set story\n    _this.story = story;\n\n    // Prevent input blur\n    $(window).on('click', function(){\n      //_this.$focus.focus();\n    });\n\n    // Bind event\n    _this.form.submit( function(event) {\n      event.preventDefault();\n      _this.listen( _this.input.val() );\n    });\n\n    _this.go(place);\n  },\n\n  clean: function() {\n    var _this = this;\n\n    _this.input.val('');\n    _this.$customForm.html('');\n    _this.$mainContainer.removeClass().addClass('container');\n\n  },\n\n  go: function(place) {\n    var _this = this;\n\n    // Output command\n    _this.say(_this.input.val().toUpperCase());\n\n    // Clear\n    _this.clean();\n\n    // Set new place\n    _this.currentPlace = _this.story[place];\n\n    // Check if place is not a special type ex. conversation, question \n    if ( !_.has(_this.currentPlace, 'type') ) {\n      // Set focus element\n      _this.$focus = _this.input;\n\n      // Print description\n      _this.say(_this.currentPlace.description);\n\n      // else is special type\n    } else {\n      switch(_this.currentPlace.type) {\n        case 'conversation': {\n          _this.chat();\n          break;\n        }\n\n        case 'question': {\n          _this.question();\n          break;\n        }\n\n      }\n    }\n\n\n    // focus \n    _this.$focus.focus();\n  },\n\n  listen: function(text) {\n    var _this = this;\n\n    // Convert to lowercase\n    text = text.toLowerCase();\n\n    // Split text into words in case theres more than just one word\n    var words = text.split(' ');\n\n    // Get an array of all available actions\n    var actions = _.keys(_this.currentPlace.actions);\n\n    for (var i = 0; i < words.length; i++) {\n      var action = words[i];\n\n      // if 'help'\n      if (action === 'help') {\n\n        var help = '<p>From here you can say:</p><ul>';\n\n        for (var x = 0; x < actions.length; x++) {\n          actions[x].toUpperCase();\n          help += '<li>' + actions[x] + '</li>';\n        }\n\n        help += '</ul>';\n        _this.say(help);\n        break;\n\n      // Check if action exists\n      } else if (_.indexOf(actions,action) >= 0) {\n\n        _this.go(_this.currentPlace.actions[action]);\n        break;\n\n      // Action not found\n      } else {\n\n        // Check for default action\n        if (_.indexOf(actions, 'default') >= 0) {\n          _this.go( _this.currentPlace.actions.default);\n        } else {\n          _this.say(action.toUpperCase());\n          _this.say('action not found');\n          _this.clean();\n        }\n\n        break;\n\n      }\n    }\n  },\n\n  say: function(text) {\n    var _this = this;\n\n    text = '<p>' + text + '</p>';\n    text = text.replace(/\\n/g, '</p><p>');\n    _this.container.append(text);\n\n    window.scrollTo(0,document.body.scrollHeight);\n  },\n\n  chat: function(conversation) {\n    var _this = this;\n\n    // Get the conversation\n    conversation = typeof conversation !== 'undefined' ? _this.story[conversation].options : _this.currentPlace.options;\n\n    var chatForm = '<form id=\"custom-form\">';\n\n    // Generate radio buttons \n    for (var ffs = 1; ffs <= _.size(conversation); ffs++) {\n      var checked = ffs === 1 ? 'checked' : '';\n\n      chatForm += '<input id=\"radio-' + ffs + '\" type=\"radio\" name=\"conversation\" value=\"' + ffs + '\" ' + checked + ' /><label for=\"radio-' + ffs + '\">' + conversation[ffs] + '</label><br />';\n    }\n\n    // Add submit button, close form\n    chatForm += '<input type=\"submit\" value=\"Submit\"></form>';\n\n    // insert dom and container class\n    _this.$customForm.html(chatForm);\n    _this.$customForm = $('#custom-form-container');\n    _this.say(_this.currentPlace.description);\n    _this.$mainContainer.addClass('conversation');\n\n    // Set new focus element\n    _this.$focus = $('#radio-1');\n\n    // Bind submit\n    _this.$customForm.find('#custom-form').bind('submit', function(event) {\n      event.preventDefault();\n      var selectedOption = $('input[type=\"radio\"]:checked').val();\n      var nextPlace = _this.currentPlace.actions[selectedOption];\n\n      _this.say(_this.currentPlace.options[selectedOption].toUpperCase());\n      _this.go(nextPlace);\n    });\n\n  }, \n\n  question: function(question) {\n    var _this = this;\n\n    // Get the answer name\n    var answerName = typeof question !== 'undefined' ? _this.story[question].save : _this.currentPlace.save;\n\n    // Generate text input\n    var questionForm = '<form id=\"custom-form\" autocomplete=\"off\"><input id=\"question-input\" type=\"text\" autocomplete=\"off\"><input type=\"submit\" value=\"Submit\"></form>';\n\n    // insert dom and container class\n    _this.$customForm.html(questionForm);\n    _this.$customForm = $('#custom-form-container');\n    _this.say(_this.currentPlace.description);\n    _this.$mainContainer.addClass('question');\n\n    // Set new focus element\n    _this.$focus = $('#question-input');\n\n    // Bind submit\n    _this.$customForm.find('#custom-form').bind('submit', function(event) {\n      event.preventDefault();\n      var answer = $('#question-input').val();\n\n      _this.save[answerName] = answer;\n\n      _this.say(answer.toUpperCase());\n      _this.go(_this.currentPlace.actions.default);\n    });\n\n  },\n\n  placeExist: function(place) {\n    var _this = this;\n\n    if (typeof( _this.story[place] ) === 'object') {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n};\n$(document).ready(function () {\n  'use strict';\n  Adventure.init(Story, 'salomehOffice');\n});\n\n$(window).load(function () {\n});\n"],"sourceRoot":"/source/"}