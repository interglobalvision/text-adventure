{"version":3,"sources":["main.js"],"names":["Adventure","story","container","$","form","input","$customForm","$focus","command","$mainContainer","currentPlace","save","init","place","_this","this","window","on","keyup","text","val","submit","event","preventDefault","listen","go","clean","html","removeClass","addClass","say","toUpperCase","placeExist","_","has","type","chat","question","description","focus","toLowerCase","words","split","actions","keys","i","length","action","help","x","indexOf","regexp","found","match","variable","substr","replace","append","scrollTo","document","body","scrollHeight","conversation","options","chatForm","ffs","size","checked","find","bind","selectedOption","nextPlace","answerName","questionForm","answer","ready","Story","load"],"mappings":"AAGAA,WACEC,MAAO,GACPC,UAAWC,EAAE,gBACbC,KAAMD,EAAE,eACRE,MAAOF,EAAE,eACTG,YAAaH,EAAE,0BACfI,OAAQ,KACRC,QAASL,EAAE,YACXM,eAAgBN,EAAE,mBAClBO,aAAc,KACdC,QACAC,KAAM,SAASX,EAAOY,GACpB,GAAIC,GAAQC,IAGZD,GAAMb,MAAQA,EAGdE,EAAEa,QAAQC,GAAG,QAAS,cAKtBH,EAAMT,MAAMa,MAAM,WAChBJ,EAAMN,QAAQW,KAAML,EAAMT,MAAMe,SAIlCN,EAAMV,KAAKiB,OAAQ,SAASC,GAC1BA,EAAMC,iBACNT,EAAMU,OAAQV,EAAMT,MAAMe,SAG5BN,EAAMW,GAAGZ,IAGXa,MAAO,WACL,GAAIZ,GAAQC,IAEZD,GAAMT,MAAMe,IAAI,IAChBN,EAAMN,QAAQW,KAAK,IACnBL,EAAMR,YAAYqB,KAAK,IACvBb,EAAML,eAAemB,cAAcC,SAAS,cAI9CJ,GAAI,SAASZ,GACX,GAAIC,GAAQC,IASZ,IANAD,EAAMgB,IAAIhB,EAAMN,QAAQW,OAAOY,eAG/BjB,EAAMY,QAGFZ,EAAMkB,WAAWnB,GAMnB,GAHAC,EAAMJ,aAAeI,EAAMb,MAAMY,GAG3BoB,EAAEC,IAAIpB,EAAMJ,aAAc,QAS9B,OAAOI,EAAMJ,aAAayB,MACxB,IAAK,eACHrB,EAAMsB,MACN,MAGF,KAAK,WACHtB,EAAMuB,eAdVvB,GAAMP,OAASO,EAAMT,MAGrBS,EAAMgB,IAAIhB,EAAMJ,aAAa4B,iBAoB/BxB,GAAMgB,IAAI,mBAIZhB,GAAMP,OAAOgC,SAGff,OAAQ,SAASL,GACf,GAAIL,GAAQC,IAGZI,GAAOA,EAAKqB,aAQZ,KAAK,GALDC,GAAQtB,EAAKuB,MAAM,KAGnBC,EAAUV,EAAEW,KAAK9B,EAAMJ,aAAaiC,SAE/BE,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAAK,CACrC,GAAIE,GAASN,EAAMI,EAGnB,IAAe,SAAXE,EAAmB,CAIrB,IAAK,GAFDC,GAAO,oCAEFC,EAAI,EAAGA,EAAIN,EAAQG,OAAQG,IAClCN,EAAQM,GAAGlB,cACXiB,GAAQ,OAASL,EAAQM,GAAK,OAGhCD,IAAQ,QACRlC,EAAMgB,IAAIkB,EACV,OAGK,GAAIf,EAAEiB,QAAQP,EAAQI,IAAW,EAAG,CAEzCjC,EAAMW,GAAGX,EAAMJ,aAAaiC,QAAQI,GACpC,OAMId,EAAEiB,QAAQP,EAAS,YAAc,EACnC7B,EAAMW,GAAIX,EAAMJ,aAAaiC,QAAnB7B,YAEVA,EAAMgB,IAAI,mBAGZ,SAMNA,IAAK,SAASX,GACZ,GAAIL,GAAQC,KACRoC,EAAS,aACTC,EAAQjC,EAAKkC,MAAMF,EAEvB,IAAIC,EAAO,CACT,GAAIE,GAAWF,EAAM,GAAGG,OAAO,EAAIH,EAAM,GAAGN,OAAS,GAAIS,OAAO,EAEhEpC,GAAOA,EAAKqC,QAAQL,EAAQrC,EAAMH,KAAK2C,IAGzCnC,EAAO,MAAQA,EAAO,OACtBA,EAAOA,EAAKqC,QAAQ,MAAO,WAC3B1C,EAAMZ,UAAUuD,OAAOtC,GAEvBH,OAAO0C,SAAS,EAAEC,SAASC,KAAKC,eAGlCzB,KAAM,SAAS0B,GACb,GAAIhD,GAAQC,IAGZ+C,GAAuC,mBAAjBA,GAA+BhD,EAAMb,MAAM6D,GAAcC,QAAUjD,EAAMJ,aAAaqD,OAK5G,KAAK,GAHDC,GAAW,0BAGNC,EAAM,EAAGA,GAAOhC,EAAEiC,KAAKJ,GAAeG,IAAO,CACpD,GAAIE,GAAkB,IAARF,EAAY,UAAY,EAEtCD,IAAY,oBAAsBC,EAAM,6CAA+CA,EAAM,KAAOE,EAAU,wBAA0BF,EAAM,KAAOH,EAAaG,GAAO,iBAI3KD,GAAY,8CAGZlD,EAAMR,YAAYqB,KAAKqC,GACvBlD,EAAMR,YAAcH,EAAE,0BACtBW,EAAMgB,IAAIhB,EAAMJ,aAAa4B,aAC7BxB,EAAML,eAAeoB,SAAS,gBAG9Bf,EAAMP,OAASJ,EAAE,YAGjBW,EAAMR,YAAY8D,KAAK,gBAAgBC,KAAK,SAAU,SAAS/C,GAC7DA,EAAMC,gBACN,IAAI+C,GAAiBnE,EAAE,+BAA+BiB,MAClDmD,EAAYzD,EAAMJ,aAAaiC,QAAQ2B,EAE3CxD,GAAMgB,IAAIhB,EAAMJ,aAAaqD,QAAQO,GAAgBvC,eACrDjB,EAAMW,GAAG8C,MAKblC,SAAU,SAASA,GACjB,GAAIvB,GAAQC,KAGRyD,EAAiC,mBAAbnC,GAA2BvB,EAAMb,MAAMoC,GAAU1B,KAAOG,EAAMJ,aAAaC,KAG/F8D,EAAe,0PAGnB3D,GAAMR,YAAYqB,KAAK8C,GACvB3D,EAAMR,YAAcH,EAAE,0BACtBW,EAAMgB,IAAIhB,EAAMJ,aAAa4B,aAC7BxB,EAAML,eAAeoB,SAAS,YAG9B1B,EAAE,mBAAmBe,MAAM,WACzBf,EAAE,qBAAqBgB,KAAMhB,EAAE,mBAAmBiB,SAIpDN,EAAMP,OAASJ,EAAE,mBAGjBW,EAAMR,YAAY8D,KAAK,gBAAgBC,KAAK,SAAU,SAAS/C,GAC7DA,EAAMC,gBACN,IAAImD,GAASvE,EAAE,mBAAmBiB,KAElCN,GAAMH,KAAK6D,GAAcE,EAEzB5D,EAAMgB,IAAI4C,EAAO3C,eACjBjB,EAAMW,GAAGX,EAAMJ,aAAaiC,QAAnB7B,eAKbkB,WAAY,SAASnB,GACnB,GAAIC,GAAQC,IAEZ,OAAqC,gBAAzBD,GAAMb,MAAMY,IACf,GAEA,IAKbV,EAAEwD,UAAUgB,MAAM,WAChB,YACA3E,WAAUY,KAAKgE,MAAO,aAGxBzE,EAAEa,QAAQ6D,KAAK","file":"main.min.js","sourcesContent":["/* jshint browser: true, devel: true, indent: 2, curly: true, eqeqeq: true, futurehostile: true, latedef: true, undef: true, unused: true */\n/* global $, document, Adventure, _, Story */\n\nAdventure = {\n  story: '',\n  container: $('#description'),\n  form: $('#input-form'),\n  input: $('#text-input'),\n  $customForm: $('#custom-form-container'),\n  $focus: null,\n  command: $('#command'),\n  $mainContainer: $('#main-container'),\n  currentPlace: null,\n  save: {},\n  init: function(story, place) {\n    var _this = this;\n\n    // Set story\n    _this.story = story;\n\n    // Prevent input blur\n    $(window).on('click', function(){\n      //_this.$focus.focus();\n    });\n\n    // Copy from input to \"command line\"\n    _this.input.keyup(function() {\n      _this.command.text( _this.input.val() );\n    });\n\n    // Bind event\n    _this.form.submit( function(event) {\n      event.preventDefault();\n      _this.listen( _this.input.val() );\n    });\n\n    _this.go(place);\n  },\n\n  clean: function() {\n    var _this = this;\n\n    _this.input.val('');\n    _this.command.text('');\n    _this.$customForm.html('');\n    _this.$mainContainer.removeClass().addClass('container');\n\n  },\n\n  go: function(place) {\n    var _this = this;\n\n    // Output command\n    _this.say(_this.command.text().toUpperCase());\n\n    // Clear input and \"command line\"\n    _this.clean();\n\n    // Check if action exists\n    if (_this.placeExist(place)) {\n\n      // Set new place\n      _this.currentPlace = _this.story[place];\n\n      // Check if place is not a special type ex. conversation, question\n      if ( !_.has(_this.currentPlace, 'type') ) {\n        // Set focus element\n        _this.$focus = _this.input;\n\n        // Print description\n        _this.say(_this.currentPlace.description);\n\n      // else is special type\n      } else {\n        switch(_this.currentPlace.type) {\n          case 'conversation': {\n            _this.chat();\n            break;\n          }\n\n          case 'question': {\n            _this.question();\n            break;\n          }\n\n        }\n      }\n\n    } else {\n      // Action not found\n      _this.say('Action not found');\n    }\n\n    // focus\n    _this.$focus.focus();\n  },\n\n  listen: function(text) {\n    var _this = this;\n\n    // Convert to lowercase\n    text = text.toLowerCase();\n\n    // Split text into words in case theres more than just one word\n    var words = text.split(' ');\n\n    // Get an array of all available actions\n    var actions = _.keys(_this.currentPlace.actions);\n\n    for (var i = 0; i < words.length; i++) {\n      var action = words[i];\n\n      // if 'help'\n      if (action === 'help') {\n\n        var help = '<p>From here you can say:</p><ul>';\n\n        for (var x = 0; x < actions.length; x++) {\n          actions[x].toUpperCase();\n          help += '<li>' + actions[x] + '</li>';\n        }\n\n        help += '</ul>';\n        _this.say(help);\n        break;\n\n      // Check if action exists\n      } else if (_.indexOf(actions,action) >= 0) {\n\n        _this.go(_this.currentPlace.actions[action]);\n        break;\n\n      // Action not found\n      } else {\n\n        // Check for default action\n        if (_.indexOf(actions, 'default') >= 0) {\n          _this.go( _this.currentPlace.actions.default);\n        } else {\n          _this.say('action not found');\n        }\n\n        break;\n\n      }\n    }\n  },\n\n  say: function(text) {\n    var _this = this;\n    var regexp = /\\{\\{.*\\}\\}/;\n    var found = text.match(regexp);\n\n    if (found) {\n      var variable = found[0].substr(0, (found[0].length - 2)).substr(2);\n\n      text = text.replace(regexp, _this.save[variable]);\n    }\n\n    text = '<p>' + text + '</p>';\n    text = text.replace(/\\n/g, '</p><p>');\n    _this.container.append(text);\n\n    window.scrollTo(0,document.body.scrollHeight);\n  },\n\n  chat: function(conversation) {\n    var _this = this;\n\n    // Get the conversation\n    conversation = typeof conversation !== 'undefined' ? _this.story[conversation].options : _this.currentPlace.options;\n\n    var chatForm = '<form id=\"custom-form\">';\n\n    // Generate radio buttons\n    for (var ffs = 1; ffs <= _.size(conversation); ffs++) {\n      var checked = ffs === 1 ? 'checked' : '';\n\n      chatForm += '<input id=\"radio-' + ffs + '\" type=\"radio\" name=\"conversation\" value=\"' + ffs + '\" ' + checked + ' /><label for=\"radio-' + ffs + '\">' + conversation[ffs] + '</label><br />';\n    }\n\n    // Add submit button, close form\n    chatForm += '<input type=\"submit\" value=\"Submit\"></form>';\n\n    // insert dom and container class\n    _this.$customForm.html(chatForm);\n    _this.$customForm = $('#custom-form-container');\n    _this.say(_this.currentPlace.description);\n    _this.$mainContainer.addClass('conversation');\n\n    // Set new focus element\n    _this.$focus = $('#radio-1');\n\n    // Bind submit\n    _this.$customForm.find('#custom-form').bind('submit', function(event) {\n      event.preventDefault();\n      var selectedOption = $('input[type=\"radio\"]:checked').val();\n      var nextPlace = _this.currentPlace.actions[selectedOption];\n\n      _this.say(_this.currentPlace.options[selectedOption].toUpperCase());\n      _this.go(nextPlace);\n    });\n\n  },\n\n  question: function(question) {\n    var _this = this;\n\n    // Get the answer name\n    var answerName = typeof question !== 'undefined' ? _this.story[question].save : _this.currentPlace.save;\n\n    // Generate text input\n    var questionForm = '<div id=\"question-command-line\"> <span id=\"question-command\"></span><div id=\"question-caret\"></div></div><form id=\"custom-form\" autocomplete=\"off\"><input id=\"question-input\" type=\"text\" autocomplete=\"off\"><input type=\"submit\" value=\"Submit\"></form>';\n\n    // insert dom and container class\n    _this.$customForm.html(questionForm);\n    _this.$customForm = $('#custom-form-container');\n    _this.say(_this.currentPlace.description);\n    _this.$mainContainer.addClass('question');\n\n    // Copy from input to \"question command line\"\n    $('#question-input').keyup(function() {\n      $('#question-command').text( $('#question-input').val() );\n    });\n\n    // Set new focus element\n    _this.$focus = $('#question-input');\n\n    // Bind submit\n    _this.$customForm.find('#custom-form').bind('submit', function(event) {\n      event.preventDefault();\n      var answer = $('#question-input').val();\n\n      _this.save[answerName] = answer;\n\n      _this.say(answer.toUpperCase());\n      _this.go(_this.currentPlace.actions.default);\n    });\n\n  },\n\n  placeExist: function(place) {\n    var _this = this;\n\n    if (typeof( _this.story[place] ) === 'object') {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n};\n$(document).ready(function () {\n  'use strict';\n  Adventure.init(Story, 'welcome');\n});\n\n$(window).load(function () {\n});\n"],"sourceRoot":"/source/"}